package com.test1;

/**
 * 位运算就有四个：按位与&,按位或|,按位亦或^,按位取反。
 * 运算规则是：
 * 	按位与：全为1时，结果为1.
 *  按位或：有一个为1，结果就为1
 *  按位亦或：两者不同才为1
 *  按位取反：0-》1，1-》0.
 *注意：上面的运算都是对二进制位的运算，其实是符号位，也把它看成是数值位参与运算。
 *认识这一点很重要。
 * 
 * 对于有符号的二进制而言：
 * ①二进制的最高位是符号位，0表示正数，1表示负数
 * ②正数的原码，反码，补码都一样
 * ③负数的反码=符号位不变，其他位取反（0=》1，1=》0）   注意，符号位不变哦
 * ④负数的补码=它的反码+1
 * ⑤0的反码，补码都是0
 * ⑥java中都是有符号数
 * ⑦计算机运算中，操作数都是以补码的方式存储和运算的，与具体编程语言无关
 * @author Administrator
 *
 *移位运算符
 *java中有三个移位运算符
 *>>算术右移： 低位溢出，符号位不变。用符号位补溢出的高位
 *右移，右边的被挤出去了，左边的空出来了。空出来了就用符号位补。空几位补几个符号位。算术右移不会改变数的符号
 *
 *<<算法左移： 符号位不变，低位补0
 *左移，左边的被挤出去了。右边空位了。但是左边的符号位必须保持不变。右边补0就是了。算术左移不会改变数的符号
 *左移几位，右边就补几个0
 *>>>逻辑右移：低位溢出，高位补0
 *有可能改变数的符号
 *
 *
 */
public class Class5_4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("1|-1="+(1|-1));
		System.out.println("~2="+(~2));
		System.out.println("1-2="+(1-2));
		System.out.println("2&3="+(2&3));
		System.out.println("2|3="+(2|3));
		//这个要注意，取反操作~。无视符号位的特殊，全部取反。
		System.out.println("~-5="+(~(-5)));
		//亦或运算,无视符号位的特殊，也把它当做一位来运算
		System.out.println("-3^3="+(-3^3));
		
		
		/*移位操作*/
		System.out.println("1>>2="+(1>>2));
		//从结果可以看出，-1无论右移多少位都是-1
		System.out.println("-1>>2="+(-1>>2));
		System.out.println("1<<2="+(1<<2));
		System.out.println("3>>>2="+(3>>>2));
	}

}
